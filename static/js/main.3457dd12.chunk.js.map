{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchFeild","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6UAGaA,EAAO,SAACC,GACjB,OACI,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,mCAAML,EAAMI,QAAQE,YCHjBC,EAAW,SAACP,GAErB,OACI,qBAAKC,UAAU,YAAf,SACKD,EAAMQ,SAASC,KAAI,SAAAL,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCLtBK,G,MAAY,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,YAAYC,EAAkB,EAAlBA,aACnC,OAEO,uBAAQX,UAAU,SAASY,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCDnEG,E,kDAEnB,aAAc,IAAD,8BACX,gBAsCFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAtBrC,EAAKC,MAAO,CACVb,SAAW,GACXU,YAAY,IApBH,E,qDAwBb,WAAoB,IAAD,OAMjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAE,EAAKT,SAAS,CAACT,SAAUkB,S,oBAWxC,WAAS,MAGwBC,KAAKN,MAA7Bb,EAHA,EAGAA,SAASU,EAHT,EAGSA,YACVU,EAAmBpB,EAASqB,QAAO,SAAAzB,GAAO,OAC9CA,EAAQE,KAAKwB,cAAcC,SAASb,EAAYY,kBAElD,OACE,sBAAK7B,UAAU,MAAf,UACE,iDASA,cAAC,EAAD,CAAWU,YAAa,kBAAmBC,aAAce,KAAKf,eAI9D,cAAC,EAAD,CAAUJ,SAAUoB,W,GAnEKI,aCMlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3457dd12.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.css'\r\n\r\nexport const Card = (props) => {\r\n    return (\r\n        <div className='card-container'>\r\n          <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n          <h1> {props.monster.name}</h1>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './card-list.styles.css'\r\nimport {Card} from './../card/card.component'\r\n\r\nexport const CardList = (props) => {\r\n    //console.log(props);\r\n    return (\r\n        <div className='card-list'>\r\n            {props.monsters.map(monster => (\r\n                <Card key={monster.id} monster={monster} />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './search-box.styles.css'\r\n\r\n\r\nexport const SearchBox = ({placeholder,handleChange}) => {\r\n    return (\r\n        \r\n           <input  className='search' type='search' placeholder={placeholder} onChange={handleChange }/>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\n\nimport './App.css'\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nexport default class App extends Component {\n  \n  constructor(){\n    super();\n    // this.state ={\n    //   gods : [\n    //     {\n    //       name: 'Indra',\n    //       id: 'god1'\n    //     },\n    //     {\n    //        name: 'Hanuman',\n    //       id: 'god2'\n    //     },\n    //     {\n    //       name:'Ram',\n    //       id: 'god3'\n    //     }\n    //   ]\n    // };\n    this.state ={\n      monsters : [],\n      searchFeild:'',\n    };\n    //this.handleChange = this.handleChange.bind(this);\n  }\n  componentDidMount(){\n    // fetch('https://jsonplaceholder.typicode.com/users')\n    // .then(response => console.log(users));\n    // fetch('https://jsonplaceholder.typicode.com/users')\n    // .then(response => response.json())\n    // .then(users=>console.log(users));\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users=>this.setState({monsters: users}));\n  }\n\n  // handleChange(e){\n  //   this.setState({searchFeild: e.target.value})\n  // }\n\n  handleChange = (e) => {\n    this.setState({searchFeild: e.target.value})\n  }\n\n  render() {\n    //search\n\n    const {monsters,searchFeild} = this.state;\n    const filteredMonsters = monsters.filter(monster=>\n      monster.name.toLowerCase().includes(searchFeild.toLowerCase())\n    )\n    return (\n      <div className='App'>\n        <h1>Monster Rolodex</h1>\n\n        {/* <input type='search' placeholder='search monsters' onChange={e => this.setState({searchFeild: e.target.value})  }/>\n        {console.log(this.state)} */}\n        {/* <input type='search' placeholder='search monsters' onChange={e => this.setState({searchFeild: e.target.value},()=>console.log(this.state))  }/> */}\n\n\n        {/* <SearchBox placeholder={'search monsters'} handleChange={e => this.setState({searchFeild: e.target.value})}/> */}\n        {/* <SearchBox placeholder={'search monsters'} handleChange={e => this.handleChange}/> */}\n        <SearchBox placeholder={'search monsters'} handleChange={this.handleChange}/>\n\n\n        {/* <CardList monsters={this.state.monsters}/> */}\n        <CardList monsters={filteredMonsters}/> \n      </div>\n    )\n  }\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}